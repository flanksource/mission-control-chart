{{- if eq .Values.db.create true }}
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgresql
spec:
  serviceName: postgresql
  selector:
    matchLabels:
      app: postgresql
  replicas: 1
  template:
    metadata:
      labels:
        app: postgresql
    spec:
      volumes:
        - name: dshm
          emptyDir:
            medium: Memory
            sizeLimit: "{{- .Values.db.shmVolume }}"
        - name: conf
          configMap:
            name: postgresql-conf
            optional: true
        - name: logs
          emptyDir: {}

      initContainers:
        - command:
          - sh
          - -c
          - mkdir -p /postgres && chmod -R 0750 /postgres && chown 999:999 -R /postgres &&  chmod -R 777 /dev/shm
          image: busybox
          name: postgres-perms
          volumeMounts:
          - mountPath: /postgres
            name: postgresql
          - name: dshm
            mountPath: /dev/shm
      containers:
      - name: postgresql
        image: {{ tpl .Values.global.imageRegistry . }}/supabase/postgres:14.1.0.89
        command:
          - /usr/local/bin/docker-entrypoint.sh
          - -D
          - /var/lib/postgresql/data
          - --config-file=/etc/postgresql/postgresql.conf
          {{- range $k, $v := .Values.db.conf }}
          - '--{{ $k }}={{ $v }}'
          {{- end }}
        resources:
            {{- toYaml .Values.db.resources | nindent 12 }}
        env:
          - name: PGDATA
            value: /var/lib/postgresql/data
          - name: POSTGRES_DB
            value: mission_control
        volumeMounts:
          - name: dshm
            mountPath: /dev/shm
          - name: postgresql
            mountPath: /var/lib/postgresql/data
            subPath: postgres
          - name: logs
            mountPath: /var/log/postgresql
        envFrom:
          - secretRef:
              name: {{ .Values.db.secretKeyRef.name }}

      {{- if .Values.db.pganalyze.enabled }}
      - name: pganalyze-collector
        image: quay.io/pganalyze/collector:stable
        env:
          - name: DB_HOST
            value: localhost
          - name: DB_NAME
            value: mission_control
          - name: DB_USERNAME
            value: pganalyze
          - name: DB_PASSWORD
            valueFrom:
              secretKeyRef:
                name: {{ .Values.db.pganalyze.secretName }}
                key: DB_PASSWORD
          - name: PGA_API_KEY
            valueFrom:
              secretKeyRef:
                name: {{ .Values.db.pganalyze.secretName }}
                key: PGA_API_KEY
          - name: PGA_API_SYSTEM_ID
            value: {{ .Values.db.pganalyze.systemID }}
          - name: PGA_ENABLE_LOG_EXPLAIN
            value: "true"
          - name: LOG_LOCATION
            value: /var/log/postgresql

        volumeMounts:
          - name: logs
            mountPath: /var/log/postgresql

      {{- end }}

  volumeClaimTemplates:
  - metadata:
      name: postgresql
    spec:
      accessModes: ["ReadWriteOnce"]
      {{ if .Values.db.storageClass }}
      storageClassName: {{ .Values.db.storageClass }}
      {{ end }}
      resources:
        requests:
          storage: {{ .Values.db.storage }}

---
apiVersion: v1
kind: Service
metadata:
  name: postgres
spec:
  selector:
    app: postgresql
  ports:
  - port: 5432
    targetPort: 5432

{{- end }}
