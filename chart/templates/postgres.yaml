{{- if eq .Values.db.create true }}
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgresql
spec:
  serviceName: postgresql
  selector:
    matchLabels:
      app: postgresql
  replicas: 1
  template:
    metadata:
      labels:
        app: postgresql
    spec:
      volumes:
        - name: dshm
          emptyDir:
            medium: Memory
            sizeLimit: "{{- .Values.db.shmVolume  }}"
      initContainers:
        {{- if .Values.db.upgrade.perform}}
        - image: tianon/postgres-upgrade:{{.Values.db.upgrade.old}}-to-{{.Values.db.upgrade.new}}
          name: postgres-upgrade
          volumeMounts:
            - mountPath: "/current"
              name: postgresql
          command:
            - sh
            - -c
            - |
              if [ ! -d '/current/postgres' ]; then exit 0; fi 
              rm -rf /var/lib/postgresql/{{.Values.db.upgrade.old}}/data 
              mv /current/postgres /var/lib/postgresql/{{.Values.db.upgrade.old}}/data
              mkdir -p /var/lib/postgresql/{{.Values.db.upgrade.new}}/data 
              chmod -R 0750 /var/lib/postgresql/{{.Values.db.upgrade.new}}/data
              chown 999:999 -R /var/lib/postgresql/{{.Values.db.upgrade.new}}/data 
              /usr/local/bin/docker-upgrade
              mv /var/lib/postgresql/{{.Values.db.upgrade.new}}/data /current/postgres
        {{- end}}
        - command:
          - sh
          - -c
          - mkdir -p /postgres && chmod -R 0750 /postgres && chown 999:999 -R /postgres &&  chmod -R 777 /dev/shm
          image: busybox
          name: postgres-perms
          volumeMounts:
          - mountPath: /postgres
            name: postgresql
          - name: dshm
            mountPath: /dev/shm
      containers:
      - name: postgresql
        image: '{{.Values.db.image}}:{{.Values.db.tag}}'
        command:
          - /usr/local/bin/docker-entrypoint.sh
          - -D
          - /var/lib/postgresql/data
          {{- range $k, $v := .Values.db.conf }}
          - --{{ $k }}={{ $v }}
          {{- end }}
        resources:
            {{- toYaml .Values.db.resources | nindent 12 }}
        env:
          - name: PGDATA
            value: /var/lib/postgresql/data
          - name: POSTGRES_DB
            value: mission_control
        volumeMounts:
          - name: dshm
            mountPath: /dev/shm
          - name: postgresql
            mountPath: /var/lib/postgresql/data
            subPath: postgres
        envFrom:
          - secretRef:
              name: {{ .Values.db.secretKeyRef.name }}
  volumeClaimTemplates:
  - metadata:
      name: postgresql
    spec:
      accessModes: ["ReadWriteOnce"]
      {{- if .Values.db.storageClass }}
      storageClassName: {{ .Values.db.storageClass }}
      {{- end }}
      resources:
        requests:
          storage: {{ .Values.db.storage }}
---
apiVersion: v1
kind: Service
metadata:
  name: postgres
spec:
  selector:
    app: postgresql
  ports:
  - port: 5432
    targetPort: 5432

{{- end }}
