{{- $secretInj := ( lookup "v1" "Secret" .Release.Namespace "postgres-connection" ) | default dict}}
{{- $injData := ( get $secretInj "data" ) | default dict }}

{{- $secretObj := ( lookup "v1" "Secret" .Release.Namespace .Values.db.secretKeyRef.name ) | default dict}}
{{- $secretData := ( get $secretObj "data" ) | default dict }}

{{- $user :=  (( get $secretData "POSTGRES_USER" ) | b64dec ) | default "postgres" }}
{{- $sslmode :=  (( get $secretData "SSLMODE" ) | b64dec ) | default "disable"  }}
{{- $password :=  (( get $injData "POSTGRES_PASSWORD") | b64dec ) | default (( get $secretData "POSTGRES_PASSWORD") | b64dec ) | default ( randAlphaNum 32 )  }}
{{- $database :=  (( get $secretData "DATABASE" ) | b64dec ) | default "mission_control" }}
{{- $postgresPort :=  (( get $secretData "POSTGRES_PORT" ) | b64dec ) | default 5432  }}
{{- $postgresHost :=  (( get $secretData "POSTGRES_HOST" ) | b64dec ) | default (print "postgres." .Release.Namespace  ".svc.cluster.local") }}

{{- define "app.db_host" -}}
  {{- if .Values.db.connectionPooler.enabled  }}
    {{- printf "%s-pgbouncer.%s.svc.cluster.local" (include "incident-commander.name" . ) .Release.Namespace }}
  {{- else if .Values.db.create }}
    {{- printf "postgres.%s.svc.cluster.local" .Release.Namespace }}
  {{- end  }}
{{- end }}

{{- $conditionalHost := include "app.db_host" . -}}
{{- $host := ternary $postgresHost $conditionalHost (empty $conditionalHost) -}}

{{- $jwtSecretObj := ( lookup "v1" "Secret" .Release.Namespace .Values.db.jwtSecretKeyRef.name ) | default dict}}
{{- $jwtSecretData := ( get $jwtSecretObj "data" ) | default dict }}
{{- $pgrstJWTSecret :=  (( get $jwtSecretData .Values.db.jwtSecretKeyRef.key) | b64dec ) | default (( get $injData "PGRST_JWT_SECRET") | b64dec ) | default ( randAlphaNum 32 ) }}

{{- $kratosSecret := ((lookup "v1" "Secret" .Release.Namespace (include "kratos-im.secretname" .)).data | default dict) -}}
{{- $kratosDSN := (print "postgres://" $user ":" $password "@" $host "/" $database) -}}

# Change kratos DSN to generated DB_URL
---
apiVersion: v1
kind: Secret
metadata:
  name: {{ .Values.db.secretKeyRef.name }}
type: Opaque
stringData:
  POSTGRES_USER: {{ $user | quote }}
  POSTGRES_PASSWORD: {{ $password | quote }}
  POSTGRES_HOST: {{ $postgresHost | quote }}
  POSTGRES_PORT: {{ $postgresPort | quote }}
  SSLMODE: {{ $sslmode | quote }}
  DB_URL:  {{ (print "postgres://" $user ":" $password "@" $postgresHost "/" $database "?sslmode=" $sslmode ) | quote }}
  DATABASE: {{ $database | quote }}

{{- if eq .Values.authProvider "kratos" }}
---
apiVersion: v1
kind: Secret
metadata:
  name: {{ include "kratos-im.secretname" . }}
  namespace: {{ .Release.Namespace }}
type: Opaque
data:
  dsn: {{ $kratosDSN | b64enc | quote }}
  # Generate a random secret if the user doesn't give one. User given secret has priority
  secretsDefault: {{ ( include "kratos-im.secrets.default" . | default ((get $kratosSecret "secretsDefault") | b64dec) | default ( randAlphaNum 32 )) | required "Value kratos.config.secrets.default can not be empty!" | b64enc | quote }}
  secretsCookie: {{ ( include "kratos-im.secrets.cookie" . | default ((get $kratosSecret "secretsCookie") | b64dec) | default (randAlphaNum 32) ) | required "Value kratos.config.secrets.cookie can not be empty!" | b64enc | quote }}
  secretsCipher: {{ ( include "kratos-im.secrets.cipher" . | default ((get $kratosSecret "secretsCipher") | b64dec) | default ( randAlphaNum 32 )) | required "Value kratos.config.secrets.cipher can not be empty!" | b64enc | quote }}
  {{- if .Values.kratos.kratos.config.courier.smtp.connection_uri }}
  smtpConnectionURI: {{ .Values.kratos.kratos.config.courier.smtp.connection_uri | b64enc | quote }}
  {{- end }}


{{- end }}
---
apiVersion: v1
kind: Secret
metadata:
  name: {{ .Values.db.jwtSecretKeyRef.name }}
type: Opaque
stringData:
  PGRST_JWT_SECRET: {{ $pgrstJWTSecret | quote }}
---
{{- $pgConfig := dict "pguser" $user "pgpassword" $password "database" $database "pgHost" $postgresHost "pgPort" $postgresPort -}}

{{- define "userlistConfig" -}}
"{{ .pguser }}" "{{ .pgpassword }}"
{{- end -}}

{{- define "pgbouncerConfig" -}}
[databases]
{{ .database }} = host={{ .pgHost }} port={{ .pgPort }} dbname={{ .database }}

[pgbouncer]
listen_addr = 0.0.0.0
listen_port = 5432
unix_socket_dir =
auth_user = {{ .pguser }}
auth_file = /etc/pgbouncer/userlist.txt
auth_type = md5
pool_mode = transaction
max_client_conn = 100
ignore_startup_parameters = extra_float_digits
{{- end -}}

{{- if .Values.db.connectionPooler.enabled  }}
apiVersion: v1
kind: Secret
metadata:
  name: {{ include "incident-commander.name" . }}-pgbouncer-config
type: Opaque
data:
  pgbouncer.ini: {{ include "pgbouncerConfig" $pgConfig | b64enc }}
  userlist.txt: {{ include "userlistConfig" $pgConfig | b64enc }}
---
apiVersion: v1
kind: Secret
metadata:
  name: {{ .Values.db.connectionPooler.secretKeyRef.name }}
type: Opaque
stringData:
  DB_URL:  {{ (print "postgres://" $user ":" $password "@" $host "/" $database "?sslmode=" $sslmode ) | quote }}
---
{{- end -}}